// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// unique_cpp
NumericVector unique_cpp(NumericVector x);
RcppExport SEXP _corrRF_unique_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_equicorr_cpp
List XWX_XWSWX_equicorr_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon);
RcppExport SEXP _corrRF_XWX_XWSWX_equicorr_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_equicorr_cpp(rho, num_leaves, I, n_i, nodesis, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_XX_equicorr_cpp
List XWX_XWSWX_XX_equicorr_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon);
RcppExport SEXP _corrRF_XWX_XWSWX_XX_equicorr_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_XX_equicorr_cpp(rho, num_leaves, I, n_i, nodesis, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWY_equicorr_cpp
List XWX_XWY_equicorr_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector Y);
RcppExport SEXP _corrRF_XWX_XWY_equicorr_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWY_equicorr_cpp(rho, num_leaves, I, n_i, nodesis, Y));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_XtestX_equicorr_cpp
List XWX_XWSWX_XtestX_equicorr_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon, int N_test, NumericVector nodesis_test);
RcppExport SEXP _corrRF_XWX_XWSWX_XtestX_equicorr_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP, SEXP N_testSEXP, SEXP nodesis_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type N_test(N_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis_test(nodesis_testSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_XtestX_equicorr_cpp(rho, num_leaves, I, n_i, nodesis, epsilon, N_test, nodesis_test));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_ar1_cpp
List XWX_XWSWX_ar1_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon);
RcppExport SEXP _corrRF_XWX_XWSWX_ar1_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_ar1_cpp(rho, num_leaves, I, n_i, nodesis, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_XX_ar1_cpp
List XWX_XWSWX_XX_ar1_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon);
RcppExport SEXP _corrRF_XWX_XWSWX_XX_ar1_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_XX_ar1_cpp(rho, num_leaves, I, n_i, nodesis, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWY_ar1_cpp
List XWX_XWY_ar1_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector Y);
RcppExport SEXP _corrRF_XWX_XWY_ar1_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWY_ar1_cpp(rho, num_leaves, I, n_i, nodesis, Y));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_XX_OLD_ar1_cpp
List XWX_XWSWX_XX_OLD_ar1_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon);
RcppExport SEXP _corrRF_XWX_XWSWX_XX_OLD_ar1_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_XX_OLD_ar1_cpp(rho, num_leaves, I, n_i, nodesis, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// XWX_XWSWX_XtestX_ar1_cpp
List XWX_XWSWX_XtestX_ar1_cpp(double rho, int num_leaves, int I, NumericVector n_i, NumericVector nodesis, NumericVector epsilon, int N_test, NumericVector nodesis_test);
RcppExport SEXP _corrRF_XWX_XWSWX_XtestX_ar1_cpp(SEXP rhoSEXP, SEXP num_leavesSEXP, SEXP ISEXP, SEXP n_iSEXP, SEXP nodesisSEXP, SEXP epsilonSEXP, SEXP N_testSEXP, SEXP nodesis_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type num_leaves(num_leavesSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis(nodesisSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type N_test(N_testSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nodesis_test(nodesis_testSEXP);
    rcpp_result_gen = Rcpp::wrap(XWX_XWSWX_XtestX_ar1_cpp(rho, num_leaves, I, n_i, nodesis, epsilon, N_test, nodesis_test));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_corrRF_unique_cpp", (DL_FUNC) &_corrRF_unique_cpp, 1},
    {"_corrRF_XWX_XWSWX_equicorr_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_equicorr_cpp, 6},
    {"_corrRF_XWX_XWSWX_XX_equicorr_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_XX_equicorr_cpp, 6},
    {"_corrRF_XWX_XWY_equicorr_cpp", (DL_FUNC) &_corrRF_XWX_XWY_equicorr_cpp, 6},
    {"_corrRF_XWX_XWSWX_XtestX_equicorr_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_XtestX_equicorr_cpp, 8},
    {"_corrRF_XWX_XWSWX_ar1_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_ar1_cpp, 6},
    {"_corrRF_XWX_XWSWX_XX_ar1_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_XX_ar1_cpp, 6},
    {"_corrRF_XWX_XWY_ar1_cpp", (DL_FUNC) &_corrRF_XWX_XWY_ar1_cpp, 6},
    {"_corrRF_XWX_XWSWX_XX_OLD_ar1_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_XX_OLD_ar1_cpp, 6},
    {"_corrRF_XWX_XWSWX_XtestX_ar1_cpp", (DL_FUNC) &_corrRF_XWX_XWSWX_XtestX_ar1_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_corrRF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
